package $package$.impl

import $package$.api._
import $organization$.common.utils.JsonFormats._

import java.time.LocalDateTime
import akka.Done
import com.lightbend.lagom.scaladsl.persistence.{AggregateEvent, AggregateEventTag, PersistentEntity}
import com.lightbend.lagom.scaladsl.persistence.PersistentEntity.ReplyType
import com.lightbend.lagom.scaladsl.playjson.{JsonSerializer, JsonSerializerRegistry}
import play.api.libs.json.{Format, Json}
import java.util.UUID
import scala.collection.immutable.Seq

/**
  * Akka serialization, used by both persistence and remoting, needs to have
  * serializers registered for every type serialized or deserialized. While it's
  * possible to use any serializer you want for Akka messages, out of the box
  * Lagom provides support for JSON, via this registry abstraction.
  *
  * The serializers are registered here, and then provided to Lagom in the
  * application loader.
  */
object $name;format="Camel"$SerializerRegistry extends JsonSerializerRegistry {
  override def serializers = List(
    // Resources
    JsonSerializer[$name;format="Camel"$Resource],

    // Requests
    JsonSerializer[Create$name;format="Camel"$Request],
    
    // Responses
    JsonSerializer[Create$name;format="Camel"$Response],

    // Commands
    JsonSerializer[Create$name;format="Camel"$Command],
    
    // Replies

    //Queries
    JsonSerializer[Get$name;format="Camel"$.type],

    // Events
    JsonSerializer[$name;format="Camel"$CreatedEvent],
    
    // States
    JsonSerializer[$name;format="Camel"$State]
  )
}